steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    args: ['build', '-t', 'us-central1-docker.pkg.dev/$_PROJECT/cartservice/cartservice:${_VERSION}', '.']
  # Step 2: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push
    args: ['push', 'us-central1-docker.pkg.dev/$_PROJECT/cartservice/cartservice:${_VERSION}']

  # Step 3: Step to configure kubectl to use the correct GKE cluster and context
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Cluster_access
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '$_GKE_CLUSTER'
      - '--zone'
      - '$_ZONE'
      - '--project'
      - '$_PROJECT'
  # Step 4: Update the container image using kubectl set
  - name: 'gcr.io/cloud-builders/kubectl'
    id: Updating_image
    args:
    - 'set'
    - 'image'
    - 'deployment/${_DEPLOYMENTNAME}'
    - '${_CONTAINERNAME}=gcr.io/${_PROJECT}/${_DEPLOYMENTNAME}:${_VERSION}'
    - '--namespace=boutique'
    env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER}'

  #Step 5: Wait for the rollout
  - name: 'gcr.io/cloud-builders/kubectl'
    id: Wait
    args:
    - 'rollout'
    - 'status'
    - 'deployment/${_DEPLOYMENTNAME}'
    - '--namespace=boutique'
    env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER}'

  #Step6: Run Chaos Experiment
  - name: 'us-central1-docker.pkg.dev/$PROJECT_ID/harness-chaos/harness-chaos'
    id: Chaos
    allowFailure: true
    secretEnv: ['API_KEY']
    waitFor: ['Wait']
    entrypoint: "bash"
    args:
      - "-c"
      - |
        hce-cli config create  \
        --name "my-config-1" \
        --interactive=false 
        
        hce-cli experiment run \
        --account-id "${_ACCOUNT_ID}" \
        --org-id "${_ORG_ID}" \
        --project-id "${_PROJECT_ID}" \
        --experiment-id "${_EXPERIMENT_ID}" \
        --interactive=false \
        --monitor=true \
        --expected-res-score="$_EXPECTED_RES_SCORE" \
        --api-key "$$API_KEY" 
        if [ $? -ne 0 ]; then
          echo "Chaos experiment failed. Creating chaos_failed_flag..."
          echo "1" > /workspace/chaos_failed_flag
        else
          echo "Chaos experiment succeeded."
          echo "0" > /workspace/chaos_failed_flag
        fi
  # Step 7: Rollback if chaos experiment failed
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: "bash"
    id: Rollback
    args:
      - "-c"
      - | 

          cat /workspace/chaos_failed_flag
          if [[ -f /workspace/chaos_failed_flag ]] && grep -q "1" /workspace/chaos_failed_flag; then

             echo "Rolling back deployment..."
             kubectl rollout undo deployment/cartservice -n boutique
             kubectl rollout status deployment/cartservice -n boutique
          else
             echo "No rollback necessary."
          fi
    waitFor: ['Chaos']
    allowFailure: true


  # Step 8: Notification
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: "bash"
    allowFailure: true
    id: Notification
    waitFor: ['Rollback']
    args:
      - "-c"
      - |
        if [[ -f /workspace/chaos_failed_flag ]] && grep -q "1" /workspace/chaos_failed_flag; then
          echo "Rollback occurred for cartservice. $_VERSION of cartservice is not resilient"
        else
          echo "Deployment of cartservice version was successful,$_VERSION of cartservice is resilient"
        fi


availableSecrets:
  secretManager:
  - versionName: projects/$_PROJECT/secrets/adarsh-harness-x-api-key/versions/latest      
    env: API_KEY

substitutions:
  _PROJECT: chaos-demo-play
  _ZONE: us-central1-c
  _GKE_CLUSTER: test-discovery
  _DEPLOYMENTNAME: cartservice
  _CONTAINERNAME: server
  _ACCOUNT_ID: 'cTU1lRSWS2SSRV9phKvuOA'
  _ORG_ID: 'default'
  _PROJECT_ID: 'adarshdemo'
  _EXPERIMENT_ID: '97229bf7-adab-4e76-a1f2-02393449bff5'
  _EXPECTED_RES_SCORE: '100'
  _VERSION: v3.0

options:
  logging: 'CLOUD_LOGGING_ONLY'
